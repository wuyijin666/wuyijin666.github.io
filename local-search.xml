<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/04/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/04/13/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>多线程与并发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浅谈Threadlocal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/13/hello-world/"/>
    <url>/2024/04/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浅谈Redis为何那么快（一）</title>
    <link href="/2024/03/29/%E6%B5%85%E8%B0%88Redis%E4%B8%BA%E4%BD%95%E9%82%A3%E4%B9%88%E5%BF%AB/"/>
    <url>/2024/03/29/%E6%B5%85%E8%B0%88Redis%E4%B8%BA%E4%BD%95%E9%82%A3%E4%B9%88%E5%BF%AB/</url>
    
    <content type="html"><![CDATA[<h4 id="我们从Redis基于内存操作的特性、高效的内存数据结构、单线程模型、I-O多路复用技术、底层模型和优化技术、持久化机制以及网络通信协议等多个方面进行分析和讨论。通过深入了解Redis内部机制和性能优化技术，我们可以更好地理解Redis之所以快速地根本原因＋在实际应用中发挥其优势。"><a href="#我们从Redis基于内存操作的特性、高效的内存数据结构、单线程模型、I-O多路复用技术、底层模型和优化技术、持久化机制以及网络通信协议等多个方面进行分析和讨论。通过深入了解Redis内部机制和性能优化技术，我们可以更好地理解Redis之所以快速地根本原因＋在实际应用中发挥其优势。" class="headerlink" title="我们从Redis基于内存操作的特性、高效的内存数据结构、单线程模型、I&#x2F;O多路复用技术、底层模型和优化技术、持久化机制以及网络通信协议等多个方面进行分析和讨论。通过深入了解Redis内部机制和性能优化技术，我们可以更好地理解Redis之所以快速地根本原因＋在实际应用中发挥其优势。"></a>我们从Redis基于内存操作的特性、高效的内存数据结构、单线程模型、I&#x2F;O多路复用技术、底层模型和优化技术、持久化机制以及网络通信协议等多个方面进行分析和讨论。通过深入了解Redis内部机制和性能优化技术，我们可以更好地理解Redis之所以快速地根本原因＋在实际应用中发挥其优势。</h4><p>![](“C:\Windows\System32\hexo-blog\wuyijinBlog\public\images\屏幕截图 2024-04-02 182002.png”)</p><h1 id="完全基于内存"><a href="#完全基于内存" class="headerlink" title="&#x3D;&#x3D;完全基于内存&#x3D;&#x3D;"></a>&#x3D;&#x3D;完全基于内存&#x3D;&#x3D;</h1><h6 id="相较于依赖磁盘存储的传统数据库系统，Redis巧妙地运用内存的高速读写特性，显著提高系统的响应速度与整体性能表现。内存相对于磁盘具有无可比拟的读写速度优势。在读取操作层面，Redis无需经过耗时的磁盘IO过程，只需在内存空间内迅速定位所需数据，显著降低访问延迟；而在写入操作时，Redis同样直接作用于内存区域，新数据能即刻生效，仅在执行持久化策略时，-例如RDB快照或者AOF日志记录，数据才会异步地或者按需地同步到磁盘，以确保即使在系统重启后数据仍能得以恢复，但此过程并不会妨碍Redis在常规操作中维持其卓越的性能表现。-说到这里，内存资源还是很宝贵的，Redis基于内存操作，它是如何在有限的内存空间中进行精细且高效的内存管理呢？"><a href="#相较于依赖磁盘存储的传统数据库系统，Redis巧妙地运用内存的高速读写特性，显著提高系统的响应速度与整体性能表现。内存相对于磁盘具有无可比拟的读写速度优势。在读取操作层面，Redis无需经过耗时的磁盘IO过程，只需在内存空间内迅速定位所需数据，显著降低访问延迟；而在写入操作时，Redis同样直接作用于内存区域，新数据能即刻生效，仅在执行持久化策略时，-例如RDB快照或者AOF日志记录，数据才会异步地或者按需地同步到磁盘，以确保即使在系统重启后数据仍能得以恢复，但此过程并不会妨碍Redis在常规操作中维持其卓越的性能表现。-说到这里，内存资源还是很宝贵的，Redis基于内存操作，它是如何在有限的内存空间中进行精细且高效的内存管理呢？" class="headerlink" title="相较于依赖磁盘存储的传统数据库系统，Redis巧妙地运用内存的高速读写特性，显著提高系统的响应速度与整体性能表现。内存相对于磁盘具有无可比拟的读写速度优势。在读取操作层面，Redis无需经过耗时的磁盘IO过程，只需在内存空间内迅速定位所需数据，显著降低访问延迟；而在写入操作时，Redis同样直接作用于内存区域，新数据能即刻生效，仅在执行持久化策略时， 例如RDB快照或者AOF日志记录，数据才会异步地或者按需地同步到磁盘，以确保即使在系统重启后数据仍能得以恢复，但此过程并不会妨碍Redis在常规操作中维持其卓越的性能表现。  说到这里，内存资源还是很宝贵的，Redis基于内存操作，它是如何在有限的内存空间中进行精细且高效的内存管理呢？"></a>相较于依赖磁盘存储的传统数据库系统，Redis巧妙地运用内存的高速读写特性，显著提高系统的响应速度与整体性能表现。内存相对于磁盘具有无可比拟的读写速度优势。在读取操作层面，Redis无需经过耗时的磁盘IO过程，只需在内存空间内迅速定位所需数据，显著降低访问延迟；而在写入操作时，Redis同样直接作用于内存区域，新数据能即刻生效，仅在执行持久化策略时， 例如RDB快照或者AOF日志记录，数据才会异步地或者按需地同步到磁盘，以确保即使在系统重启后数据仍能得以恢复，但此过程并不会妨碍Redis在常规操作中维持其卓越的性能表现。  说到这里，内存资源还是很宝贵的，Redis基于内存操作，它是如何在有限的内存空间中进行精细且高效的内存管理呢？</h6><h2 id="过期键删除"><a href="#过期键删除" class="headerlink" title="过期键删除"></a>过期键删除</h2><h3 id="Redis支持为键设置过期时间（TTL）-并且在键过期后会通过两种方式删除它们。"><a href="#Redis支持为键设置过期时间（TTL）-并且在键过期后会通过两种方式删除它们。" class="headerlink" title="Redis支持为键设置过期时间（TTL）,并且在键过期后会通过两种方式删除它们。"></a>Redis支持为键设置过期时间（TTL）,并且在键过期后会通过两种方式删除它们。</h3><ol><li>惰性删除（Lazy Expire):只有当有客户端尝试访问过期键时，Redis才会执行删除操作。优势：避免了不必要的操作，只有在需要时才进行删除。缺点：可能会导致过期键在一段时间内仍占用内存。  </li><li>定期删除（Active Expire):Redis周期性地（默认每10秒）随机抽取一部分键，并检查它们的过期时间。但定期删除会带来额外的CPU消耗。  这两种方式结合，可有效管理和清除过期键，保证Redis的内存使用在合理的范围内。同时，在日常开发中，可以根据业务场景和需求调整过期策略的配置，以达到最佳的性能和内存利用率。</li></ol><h2 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h2><h6 id="内存淘汰策略是Redis用于释放内存空间的一种机制，当内存空间不足时（达到或超过了配置的MaxMemory-，Redis会根据预先设置的淘汰策略选择要删除的键，从而释放内存空间。通过合理选择和内存淘汰策略，可以有效管理内存使用，防止内存溢出，并保证系统的稳定性和性能。"><a href="#内存淘汰策略是Redis用于释放内存空间的一种机制，当内存空间不足时（达到或超过了配置的MaxMemory-，Redis会根据预先设置的淘汰策略选择要删除的键，从而释放内存空间。通过合理选择和内存淘汰策略，可以有效管理内存使用，防止内存溢出，并保证系统的稳定性和性能。" class="headerlink" title="内存淘汰策略是Redis用于释放内存空间的一种机制，当内存空间不足时（达到或超过了配置的MaxMemory)，Redis会根据预先设置的淘汰策略选择要删除的键，从而释放内存空间。通过合理选择和内存淘汰策略，可以有效管理内存使用，防止内存溢出，并保证系统的稳定性和性能。"></a>内存淘汰策略是Redis用于释放内存空间的一种机制，当内存空间不足时（达到或超过了配置的MaxMemory)，Redis会根据预先设置的淘汰策略选择要删除的键，从而释放内存空间。通过合理选择和内存淘汰策略，可以有效管理内存使用，防止内存溢出，并保证系统的稳定性和性能。</h6><h6 id="常见的内存淘汰策略："><a href="#常见的内存淘汰策略：" class="headerlink" title="常见的内存淘汰策略："></a>常见的内存淘汰策略：</h6><p>1.LRU(最近最少使用)：LRU策略会删除最近最少被访问的键.Redis会记录每一个键最后一次被访问的时间戳，并定期检查这些时间戳，选择最久未被访问的键进行删除。该策略适合于缓存场景，通常最久未被访问的键可能是最不常用的。<br>2.LFU(最不经常使用)：该策略会删除最不经常被访问的键。该策略适合淘汰访问频率最低的键。<br>3.TTL(键的过期时间):该策略会删除已经过期的键。<br>4.随机删除：该策略会随机选择一些键进行删除。虽然这种策略不考虑键的使用频率和过期时间，但某种情况下可能是简单且有效的淘汰方式，特别是当内存空间不足时。<br>5.淘汰固定数量的键：该策略会选择要删除的键的数量，然后按照一定的规则（LRU,LFU）来选择要淘汰的键。这种淘汰可以保证每次淘汰都释放固定数量的内存空间。<br>当Redis的内存使用达到配置的maxmemory限制时，就会触发内存淘汰策略，以释放内存空间。通过合理配置内存限制和内存淘汰策略，可以有效管理Redis的内存使用，保证系统在内存空间不足时能够及时释放内存，避免因内存溢出导致系统性能下降或者崩溃。</p><blockquote><blockquote><p>修改内存maxmemory只需在redis.conf配置文件中配置maxmemory-policy参数即可。</p></blockquote></blockquote><h2 id="内存碎片管理"><a href="#内存碎片管理" class="headerlink" title="内存碎片管理"></a>内存碎片管理</h2><h6 id="内存碎片管理是指对Redis中的内存空间进行重新排列和整理，以减少内存碎片的数量和大小。内存碎片是指已分配但不再使用的内存块，这些内存块虽然被标记为已分配，但实际上并未被有效利用，造成了内存的浪费。"><a href="#内存碎片管理是指对Redis中的内存空间进行重新排列和整理，以减少内存碎片的数量和大小。内存碎片是指已分配但不再使用的内存块，这些内存块虽然被标记为已分配，但实际上并未被有效利用，造成了内存的浪费。" class="headerlink" title="内存碎片管理是指对Redis中的内存空间进行重新排列和整理，以减少内存碎片的数量和大小。内存碎片是指已分配但不再使用的内存块，这些内存块虽然被标记为已分配，但实际上并未被有效利用，造成了内存的浪费。"></a>内存碎片管理是指对Redis中的内存空间进行重新排列和整理，以减少内存碎片的数量和大小。内存碎片是指已分配但不再使用的内存块，这些内存块虽然被标记为已分配，但实际上并未被有效利用，造成了内存的浪费。</h6><h6 id="为了解决内存碎片化的问题，Redis会定期进行内存碎片整理操作。内存碎片整理过程包括以下几个步骤："><a href="#为了解决内存碎片化的问题，Redis会定期进行内存碎片整理操作。内存碎片整理过程包括以下几个步骤：" class="headerlink" title="为了解决内存碎片化的问题，Redis会定期进行内存碎片整理操作。内存碎片整理过程包括以下几个步骤："></a>为了解决内存碎片化的问题，Redis会定期进行内存碎片整理操作。内存碎片整理过程包括以下几个步骤：</h6><p>1.遍历内存空间：Redis会遍历整个内存空间，检查每个内存块的状态，包括已分配和未分配的内存块。<br>2.合并相邻的空闲内存块：Redis会尝试合并相邻的空闲内存块，将它们合并成一个更大的内存块。这样可以减少内存碎片的数量，提高内存利用率。<br>3.移动数据：如果有必要，Redis可能会将数据从一个内存块移动到另一个内存块，以便更好地组织内存空间。这个过程可能会比较耗时，因为需要将数据从一个位置复制到另一个位置。<br>4.释放不再使用的内存块：最后，Redis会释放那些不再使用的内存块，以便它们可以被重新分配给新的数据。</p><h6 id="通过定期进行碎片整理操作，Redis可以保持内存空间的连续性，减少内存碎片化程度，提高内存利用率，从而提高系统的性能和稳定性。但是内存碎片整理过程可能会消耗一定的系统资源，尤其是在内存碎片较多的情况下。所以通常情况下，会选择在系统负载较低的情况下进行碎片整理操作，以避免对系统性能产生不利影响。"><a href="#通过定期进行碎片整理操作，Redis可以保持内存空间的连续性，减少内存碎片化程度，提高内存利用率，从而提高系统的性能和稳定性。但是内存碎片整理过程可能会消耗一定的系统资源，尤其是在内存碎片较多的情况下。所以通常情况下，会选择在系统负载较低的情况下进行碎片整理操作，以避免对系统性能产生不利影响。" class="headerlink" title="通过定期进行碎片整理操作，Redis可以保持内存空间的连续性，减少内存碎片化程度，提高内存利用率，从而提高系统的性能和稳定性。但是内存碎片整理过程可能会消耗一定的系统资源，尤其是在内存碎片较多的情况下。所以通常情况下，会选择在系统负载较低的情况下进行碎片整理操作，以避免对系统性能产生不利影响。"></a>通过定期进行碎片整理操作，Redis可以保持内存空间的连续性，减少内存碎片化程度，提高内存利用率，从而提高系统的性能和稳定性。但是内存碎片整理过程可能会消耗一定的系统资源，尤其是在内存碎片较多的情况下。所以通常情况下，会选择在系统负载较低的情况下进行碎片整理操作，以避免对系统性能产生不利影响。</h6>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>本文探讨Redis之所以快速处理大规模数据的原因</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
